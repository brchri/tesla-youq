name: Publish Docker Image

on:
  workflow_dispatch:
    inputs:
      tagVersion:
        type: string
        description: 'Docker image tag to push'
        required: true
      tagLatest:
        type: boolean
        description: 'Add latest tag to image'
        required: true
        default: false
  push:
    tags:
      - 'v*'

env:
  REGISTRY_IMAGE: brchri/tesla-youq

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        platform:
          - linux/amd64
          - linux/arm/v7
          - linux/arm64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: ${{ matrix.platform }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract version from git tag
        shell: bash
        if: github.event_name == 'push'
        run: |
          echo "BUILD_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
      
      - name: Set version from workflow dispatch
        shell: bash
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "BUILD_VERSION=${{ github.event.inputs.tagVersion }}" >> $GITHUB_ENV

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          labels: org.opencontainers.image.version=${{ env.BUILD_VERSION }}

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: BUILD_VERSION=${{ env.BUILD_VERSION }}
          outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true

      - name: Test
        if: ${{ matrix.platform == 'linux/amd64' }}
        run: |
          docker run --rm ${{ format('{0}@{1}', env.REGISTRY_IMAGE, steps.build.outputs.digest) }} /app/tesla-youq -v

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v3
        with: 
          name: digests
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      -
        name: Download digests
        uses: actions/download-artifact@v3
        with:
          name: digests
          path: /tmp/digests
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Extract version from git tag
        shell: bash
        if: github.event_name == 'push'
        run: |
          BUILD_VERSION=${GITHUB_REF#refs/tags/}
          echo "BUILD_VERSION=${BUILD_VERSION}" >> $GITHUB_ENV
          # only tag latest if BUILD_VERSION is a proper semver, not a nightly/release-candidate/etc
          semverPattern='^v[0-9]+\.[0-9]+\.[0-9]+$'
          echo "TAG_LATEST=$([[ $BUILD_VERSION =~ $semverPattern ]] && echo true || echo false)" >> $GITHUB_ENV
      
      - name: Set version from workflow dispatch
        shell: bash
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "BUILD_VERSION=${{ github.event.inputs.tagVersion }}" >> $GITHUB_ENV
          echo "TAG_LATEST=${{ github.event.inputs.tagLatest }}" >> $GITHUB_ENV
      
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          flavor: latest=${{ env.TAG_LATEST }}
          tags: type=raw,value=${{ env.BUILD_VERSION }}

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)
      
      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}
