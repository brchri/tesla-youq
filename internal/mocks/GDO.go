// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// GDO is an autogenerated mock type for the GDO type
type GDO struct {
	mock.Mock
}

type GDO_Expecter struct {
	mock *mock.Mock
}

func (_m *GDO) EXPECT() *GDO_Expecter {
	return &GDO_Expecter{mock: &_m.Mock}
}

// ProcessShutdown provides a mock function with given fields:
func (_m *GDO) ProcessShutdown() {
	_m.Called()
}

// GDO_ProcessShutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessShutdown'
type GDO_ProcessShutdown_Call struct {
	*mock.Call
}

// ProcessShutdown is a helper method to define mock.On call
func (_e *GDO_Expecter) ProcessShutdown() *GDO_ProcessShutdown_Call {
	return &GDO_ProcessShutdown_Call{Call: _e.mock.On("ProcessShutdown")}
}

func (_c *GDO_ProcessShutdown_Call) Run(run func()) *GDO_ProcessShutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GDO_ProcessShutdown_Call) Return() *GDO_ProcessShutdown_Call {
	_c.Call.Return()
	return _c
}

func (_c *GDO_ProcessShutdown_Call) RunAndReturn(run func()) *GDO_ProcessShutdown_Call {
	_c.Call.Return(run)
	return _c
}

// SetGarageDoor provides a mock function with given fields: action
func (_m *GDO) SetGarageDoor(action string) error {
	ret := _m.Called(action)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(action)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GDO_SetGarageDoor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetGarageDoor'
type GDO_SetGarageDoor_Call struct {
	*mock.Call
}

// SetGarageDoor is a helper method to define mock.On call
//   - action string
func (_e *GDO_Expecter) SetGarageDoor(action interface{}) *GDO_SetGarageDoor_Call {
	return &GDO_SetGarageDoor_Call{Call: _e.mock.On("SetGarageDoor", action)}
}

func (_c *GDO_SetGarageDoor_Call) Run(run func(action string)) *GDO_SetGarageDoor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *GDO_SetGarageDoor_Call) Return(err error) *GDO_SetGarageDoor_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *GDO_SetGarageDoor_Call) RunAndReturn(run func(string) error) *GDO_SetGarageDoor_Call {
	_c.Call.Return(run)
	return _c
}

// NewGDO creates a new instance of GDO. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGDO(t interface {
	mock.TestingT
	Cleanup(func())
}) *GDO {
	mock := &GDO{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
