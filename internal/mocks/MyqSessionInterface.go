// Code generated by mockery v2.23.4. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MyqSessionInterface is an autogenerated mock type for the MyqSessionInterface type
type MyqSessionInterface struct {
	mock.Mock
}

// DeviceState provides a mock function with given fields: serialNumber
func (_m *MyqSessionInterface) DeviceState(serialNumber string) (string, error) {
	ret := _m.Called(serialNumber)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(serialNumber)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(serialNumber)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(serialNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields:
func (_m *MyqSessionInterface) Login() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// New provides a mock function with given fields:
func (_m *MyqSessionInterface) New() {
	_m.Called()
}

// SetDoorState provides a mock function with given fields: serialNumber, action
func (_m *MyqSessionInterface) SetDoorState(serialNumber string, action string) error {
	ret := _m.Called(serialNumber, action)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(serialNumber, action)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetPassword provides a mock function with given fields: _a0
func (_m *MyqSessionInterface) SetPassword(_a0 string) {
	_m.Called(_a0)
}

// SetUsername provides a mock function with given fields: _a0
func (_m *MyqSessionInterface) SetUsername(_a0 string) {
	_m.Called(_a0)
}

// NewMyqSessionInterface creates a new instance of MyqSessionInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMyqSessionInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MyqSessionInterface {
	mock := &MyqSessionInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
